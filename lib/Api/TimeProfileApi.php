<?php
/**
 * TimeProfileApi
 * PHP version 5
 *
 * @category Class
 * @package  Exivo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * exivo api documentation
 *
 * The exivo API lets you manage an exivo site. To be allowed to use the API the Connection service needs to be activated. For every HTTP request the `siteId`, an `API_KEY` and the corresponding `API_SECRET` are required. All this information can be found in the [exivo app](https://customer.exivo.io/credentials). A new `API_KEY` can be generated in the app. Please note that `API_SECRET` is a confidential information and should be stored securely. After closing the dialogue or refreshing the page the secret can't be displayed anymore. If the secret is lost, a new key needs to be generated and the old must be deleted.
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exivo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Exivo\ApiException;
use Exivo\Configuration;
use Exivo\HeaderSelector;
use Exivo\ObjectSerializer;

/**
 * TimeProfileApi Class Doc Comment
 *
 * @category Class
 * @package  Exivo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeProfileApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation defineTimeProfile
     *
     * Creates a new time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Exivo\Model\TimeProfile
     */
    public function defineTimeProfile($site_id, $body)
    {
        list($response) = $this->defineTimeProfileWithHttpInfo($site_id, $body);
        return $response;
    }

    /**
     * Operation defineTimeProfileWithHttpInfo
     *
     * Creates a new time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Exivo\Model\TimeProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function defineTimeProfileWithHttpInfo($site_id, $body)
    {
        $returnType = '\Exivo\Model\TimeProfile';
        $request = $this->defineTimeProfileRequest($site_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Exivo\Model\TimeProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation defineTimeProfileAsync
     *
     * Creates a new time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function defineTimeProfileAsync($site_id, $body)
    {
        return $this->defineTimeProfileAsyncWithHttpInfo($site_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation defineTimeProfileAsyncWithHttpInfo
     *
     * Creates a new time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function defineTimeProfileAsyncWithHttpInfo($site_id, $body)
    {
        $returnType = '\Exivo\Model\TimeProfile';
        $request = $this->defineTimeProfileRequest($site_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'defineTimeProfile'
     *
     * @param  string $site_id ID of site to work (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function defineTimeProfileRequest($site_id, $body)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling defineTimeProfile'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling defineTimeProfile'
            );
        }

        $resourcePath = '/{siteId}/timeprofile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimeProfile
     *
     * get time profile by ID
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to return (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Exivo\Model\TimeProfile
     */
    public function getTimeProfile($site_id, $time_profile_id)
    {
        list($response) = $this->getTimeProfileWithHttpInfo($site_id, $time_profile_id);
        return $response;
    }

    /**
     * Operation getTimeProfileWithHttpInfo
     *
     * get time profile by ID
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to return (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Exivo\Model\TimeProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeProfileWithHttpInfo($site_id, $time_profile_id)
    {
        $returnType = '\Exivo\Model\TimeProfile';
        $request = $this->getTimeProfileRequest($site_id, $time_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Exivo\Model\TimeProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTimeProfileAsync
     *
     * get time profile by ID
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeProfileAsync($site_id, $time_profile_id)
    {
        return $this->getTimeProfileAsyncWithHttpInfo($site_id, $time_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimeProfileAsyncWithHttpInfo
     *
     * get time profile by ID
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeProfileAsyncWithHttpInfo($site_id, $time_profile_id)
    {
        $returnType = '\Exivo\Model\TimeProfile';
        $request = $this->getTimeProfileRequest($site_id, $time_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimeProfile'
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to return (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTimeProfileRequest($site_id, $time_profile_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling getTimeProfile'
            );
        }
        // verify the required parameter 'time_profile_id' is set
        if ($time_profile_id === null || (is_array($time_profile_id) && count($time_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_profile_id when calling getTimeProfile'
            );
        }

        $resourcePath = '/{siteId}/timeprofile/{timeProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($time_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timeProfileId' . '}',
                ObjectSerializer::toPathValue($time_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimeProfiles
     *
     * get all timeprofiles
     *
     * @param  string $site_id ID of site to work (required)
     * @param  int $skip for pagination (optional, default to 0)
     * @param  int $limit for pagination (optional, default to 0)
     * @param  string $sort for pagination (optional)
     * @param  string $sort_dir for pagination (optional, default to asc)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Exivo\Model\TimeProfile[]
     */
    public function getTimeProfiles($site_id, $skip = '0', $limit = '0', $sort = null, $sort_dir = 'asc')
    {
        list($response) = $this->getTimeProfilesWithHttpInfo($site_id, $skip, $limit, $sort, $sort_dir);
        return $response;
    }

    /**
     * Operation getTimeProfilesWithHttpInfo
     *
     * get all timeprofiles
     *
     * @param  string $site_id ID of site to work (required)
     * @param  int $skip for pagination (optional, default to 0)
     * @param  int $limit for pagination (optional, default to 0)
     * @param  string $sort for pagination (optional)
     * @param  string $sort_dir for pagination (optional, default to asc)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Exivo\Model\TimeProfile[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeProfilesWithHttpInfo($site_id, $skip = '0', $limit = '0', $sort = null, $sort_dir = 'asc')
    {
        $returnType = '\Exivo\Model\TimeProfile[]';
        $request = $this->getTimeProfilesRequest($site_id, $skip, $limit, $sort, $sort_dir);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Exivo\Model\TimeProfile[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTimeProfilesAsync
     *
     * get all timeprofiles
     *
     * @param  string $site_id ID of site to work (required)
     * @param  int $skip for pagination (optional, default to 0)
     * @param  int $limit for pagination (optional, default to 0)
     * @param  string $sort for pagination (optional)
     * @param  string $sort_dir for pagination (optional, default to asc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeProfilesAsync($site_id, $skip = '0', $limit = '0', $sort = null, $sort_dir = 'asc')
    {
        return $this->getTimeProfilesAsyncWithHttpInfo($site_id, $skip, $limit, $sort, $sort_dir)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimeProfilesAsyncWithHttpInfo
     *
     * get all timeprofiles
     *
     * @param  string $site_id ID of site to work (required)
     * @param  int $skip for pagination (optional, default to 0)
     * @param  int $limit for pagination (optional, default to 0)
     * @param  string $sort for pagination (optional)
     * @param  string $sort_dir for pagination (optional, default to asc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeProfilesAsyncWithHttpInfo($site_id, $skip = '0', $limit = '0', $sort = null, $sort_dir = 'asc')
    {
        $returnType = '\Exivo\Model\TimeProfile[]';
        $request = $this->getTimeProfilesRequest($site_id, $skip, $limit, $sort, $sort_dir);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimeProfiles'
     *
     * @param  string $site_id ID of site to work (required)
     * @param  int $skip for pagination (optional, default to 0)
     * @param  int $limit for pagination (optional, default to 0)
     * @param  string $sort for pagination (optional)
     * @param  string $sort_dir for pagination (optional, default to asc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTimeProfilesRequest($site_id, $skip = '0', $limit = '0', $sort = null, $sort_dir = 'asc')
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling getTimeProfiles'
            );
        }

        $resourcePath = '/{siteId}/timeprofile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($sort_dir !== null) {
            $queryParams['sortDir'] = ObjectSerializer::toQueryValue($sort_dir);
        }

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redefineTimeProfile
     *
     * Updates the time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to update (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Exivo\Model\TimeProfile
     */
    public function redefineTimeProfile($site_id, $time_profile_id, $body)
    {
        list($response) = $this->redefineTimeProfileWithHttpInfo($site_id, $time_profile_id, $body);
        return $response;
    }

    /**
     * Operation redefineTimeProfileWithHttpInfo
     *
     * Updates the time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to update (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Exivo\Model\TimeProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function redefineTimeProfileWithHttpInfo($site_id, $time_profile_id, $body)
    {
        $returnType = '\Exivo\Model\TimeProfile';
        $request = $this->redefineTimeProfileRequest($site_id, $time_profile_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Exivo\Model\TimeProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation redefineTimeProfileAsync
     *
     * Updates the time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to update (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redefineTimeProfileAsync($site_id, $time_profile_id, $body)
    {
        return $this->redefineTimeProfileAsyncWithHttpInfo($site_id, $time_profile_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redefineTimeProfileAsyncWithHttpInfo
     *
     * Updates the time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to update (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redefineTimeProfileAsyncWithHttpInfo($site_id, $time_profile_id, $body)
    {
        $returnType = '\Exivo\Model\TimeProfile';
        $request = $this->redefineTimeProfileRequest($site_id, $time_profile_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redefineTimeProfile'
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to update (required)
     * @param  \Exivo\Model\TimeProfilePayload $body time profile properties (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function redefineTimeProfileRequest($site_id, $time_profile_id, $body)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling redefineTimeProfile'
            );
        }
        // verify the required parameter 'time_profile_id' is set
        if ($time_profile_id === null || (is_array($time_profile_id) && count($time_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_profile_id when calling redefineTimeProfile'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling redefineTimeProfile'
            );
        }

        $resourcePath = '/{siteId}/timeprofile/{timeProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($time_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timeProfileId' . '}',
                ObjectSerializer::toPathValue($time_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeTimeProfile
     *
     * Deletes a time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to delete (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeTimeProfile($site_id, $time_profile_id)
    {
        $this->removeTimeProfileWithHttpInfo($site_id, $time_profile_id);
    }

    /**
     * Operation removeTimeProfileWithHttpInfo
     *
     * Deletes a time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to delete (required)
     *
     * @throws \Exivo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTimeProfileWithHttpInfo($site_id, $time_profile_id)
    {
        $returnType = '';
        $request = $this->removeTimeProfileRequest($site_id, $time_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeTimeProfileAsync
     *
     * Deletes a time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTimeProfileAsync($site_id, $time_profile_id)
    {
        return $this->removeTimeProfileAsyncWithHttpInfo($site_id, $time_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeTimeProfileAsyncWithHttpInfo
     *
     * Deletes a time profile
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTimeProfileAsyncWithHttpInfo($site_id, $time_profile_id)
    {
        $returnType = '';
        $request = $this->removeTimeProfileRequest($site_id, $time_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeTimeProfile'
     *
     * @param  string $site_id ID of site to work (required)
     * @param  string $time_profile_id ID of time profile to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeTimeProfileRequest($site_id, $time_profile_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling removeTimeProfile'
            );
        }
        // verify the required parameter 'time_profile_id' is set
        if ($time_profile_id === null || (is_array($time_profile_id) && count($time_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_profile_id when calling removeTimeProfile'
            );
        }

        $resourcePath = '/{siteId}/timeprofile/{timeProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                '{' . 'siteId' . '}',
                ObjectSerializer::toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($time_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'timeProfileId' . '}',
                ObjectSerializer::toPathValue($time_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
