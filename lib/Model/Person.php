<?php
/**
 * Person
 *
 * PHP version 5
 *
 * @category Class
 * @package  Exivo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * exivo api documentation
 *
 * The exivo API lets you manage an exivo site. To be allowed to use the API the Connection service needs to be activated. For every HTTP request the `siteId`, an `API_KEY` and the corresponding `API_SECRET` are required. All this information can be found in the [exivo app](https://customer.exivo.io/credentials). A new `API_KEY` can be generated in the app. Please note that `API_SECRET` is a confidential information and should be stored securely. After closing the dialogue or refreshing the page the secret can't be displayed anymore. If the secret is lost, a new key needs to be generated and the old must be deleted.
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exivo\Model;
use \Exivo\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @package  Exivo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Person extends PersonPayload 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'revoked' => 'bool',
        'access_group_id' => 'string',
        'has_pin_code' => 'bool',
        'media' => 'string[]',
        'entry_date' => 'string',
        'exit_date' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'revoked' => null,
        'access_group_id' => null,
        'has_pin_code' => null,
        'media' => null,
        'entry_date' => null,
        'exit_date' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'revoked' => 'revoked',
        'access_group_id' => 'accessGroupId',
        'has_pin_code' => 'hasPinCode',
        'media' => 'media',
        'entry_date' => 'entryDate',
        'exit_date' => 'exitDate',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'revoked' => 'setRevoked',
        'access_group_id' => 'setAccessGroupId',
        'has_pin_code' => 'setHasPinCode',
        'media' => 'setMedia',
        'entry_date' => 'setEntryDate',
        'exit_date' => 'setExitDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'revoked' => 'getRevoked',
        'access_group_id' => 'getAccessGroupId',
        'has_pin_code' => 'getHasPinCode',
        'media' => 'getMedia',
        'entry_date' => 'getEntryDate',
        'exit_date' => 'getExitDate',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }






    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['revoked'] = isset($data['revoked']) ? $data['revoked'] : null;
        $this->container['access_group_id'] = isset($data['access_group_id']) ? $data['access_group_id'] : null;
        $this->container['has_pin_code'] = isset($data['has_pin_code']) ? $data['has_pin_code'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['entry_date'] = isset($data['entry_date']) ? $data['entry_date'] : null;
        $this->container['exit_date'] = isset($data['exit_date']) ? $data['exit_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets revoked
     *
     * @return bool
     */
    public function getRevoked()
    {
        return $this->container['revoked'];
    }

    /**
     * Sets revoked
     *
     * @param bool $revoked revoked
     *
     * @return $this
     */
    public function setRevoked($revoked)
    {
        $this->container['revoked'] = $revoked;

        return $this;
    }

    /**
     * Gets access_group_id
     *
     * @return string
     */
    public function getAccessGroupId()
    {
        return $this->container['access_group_id'];
    }

    /**
     * Sets access_group_id
     *
     * @param string $access_group_id access_group_id
     *
     * @return $this
     */
    public function setAccessGroupId($access_group_id)
    {
        $this->container['access_group_id'] = $access_group_id;

        return $this;
    }

    /**
     * Gets has_pin_code
     *
     * @return bool
     */
    public function getHasPinCode()
    {
        return $this->container['has_pin_code'];
    }

    /**
     * Sets has_pin_code
     *
     * @param bool $has_pin_code has_pin_code
     *
     * @return $this
     */
    public function setHasPinCode($has_pin_code)
    {
        $this->container['has_pin_code'] = $has_pin_code;

        return $this;
    }

    /**
     * Gets media
     *
     * @return string[]
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param string[] $media media
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    public function getEntryDate()
    {
        return $this->container['entry_date'];
    }

    public function setEntryDate($entryDate)
    {
        $this->container['entry_date'] = $entryDate;

        return $this;
    }

    public function getExitDate()
    {
        return $this->container['exit_date'];
    }

    public function setExitDate($exitDate)
    {
        $this->container['exit_date'] = $exitDate;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


