<?php
/**
 * DigitalKeyVisit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Exivo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * exivo api documentation
 *
 * The exivo API lets you manage an exivo site. To be allowed to use the API the Connection service needs to be activated. For every HTTP request the `siteId`, an `API_KEY` and the corresponding `API_SECRET` are required. All this information can be found in the [exivo app](https://customer.exivo.io/credentials). A new `API_KEY` can be generated in the app. Please note that `API_SECRET` is a confidential information and should be stored securely. After closing the dialogue or refreshing the page the secret can't be displayed anymore. If the secret is lost, a new key needs to be generated and the old must be deleted.
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.27
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Exivo\Model;

use \ArrayAccess;
use \Exivo\ObjectSerializer;

/**
 * DigitalKeyVisit Class Doc Comment
 *
 * @category Class
 * @package  Exivo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DigitalKeyVisit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'digitalKeyVisit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'expired' => 'bool',
        'revoked' => 'bool',
        'name' => 'string',
        'valid_from' => 'string',
        'valid_to' => 'string',
        'components' => 'string[]',
        'form_factor' => 'string',
        'public_registration_id' => 'string',
        'mobile_app' => '\Exivo\Model\MobileApp',
        'install_notification' => 'bool',
        'message' => 'string',
        'callback_uri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'expired' => null,
        'revoked' => null,
        'name' => null,
        'valid_from' => 'dateTime',
        'valid_to' => 'dateTime',
        'components' => null,
        'form_factor' => null,
        'public_registration_id' => null,
        'mobile_app' => null,
        'install_notification' => null,
        'message' => null,
        'callback_uri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'expired' => 'expired',
        'revoked' => 'revoked',
        'name' => 'name',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo',
        'components' => 'components',
        'form_factor' => 'formFactor',
        'public_registration_id' => 'publicRegistrationId',
        'mobile_app' => 'mobileApp',
        'install_notification' => 'installNotification',
        'message' => 'message',
        'callback_uri' => 'callbackUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'expired' => 'setExpired',
        'revoked' => 'setRevoked',
        'name' => 'setName',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'components' => 'setComponents',
        'form_factor' => 'setFormFactor',
        'public_registration_id' => 'setPublicRegistrationId',
        'mobile_app' => 'setMobileApp',
        'install_notification' => 'setInstallNotification',
        'message' => 'setMessage',
        'callback_uri' => 'setCallbackUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'expired' => 'getExpired',
        'revoked' => 'getRevoked',
        'name' => 'getName',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'components' => 'getComponents',
        'form_factor' => 'getFormFactor',
        'public_registration_id' => 'getPublicRegistrationId',
        'mobile_app' => 'getMobileApp',
        'install_notification' => 'getInstallNotification',
        'message' => 'getMessage',
        'callback_uri' => 'getCallbackUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FORM_FACTOR_EMAIL = 'ma-email';
    const FORM_FACTOR_PHONE = 'ma-phone';
    const FORM_FACTOR_CUSTOM = 'ma-custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFormFactorAllowableValues()
    {
        return [
            self::FORM_FACTOR_EMAIL,
            self::FORM_FACTOR_PHONE,
            self::FORM_FACTOR_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['revoked'] = isset($data['revoked']) ? $data['revoked'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
        $this->container['form_factor'] = isset($data['form_factor']) ? $data['form_factor'] : null;
        $this->container['public_registration_id'] = isset($data['public_registration_id']) ? $data['public_registration_id'] : null;
        $this->container['mobile_app'] = isset($data['mobile_app']) ? $data['mobile_app'] : null;
        $this->container['install_notification'] = isset($data['install_notification']) ? $data['install_notification'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['callback_uri'] = isset($data['callback_uri']) ? $data['callback_uri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFormFactorAllowableValues();
        if (!is_null($this->container['form_factor']) && !in_array($this->container['form_factor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'form_factor', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool $expired expired
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets revoked
     *
     * @return bool
     */
    public function getRevoked()
    {
        return $this->container['revoked'];
    }

    /**
     * Sets revoked
     *
     * @param bool $revoked revoked
     *
     * @return $this
     */
    public function setRevoked($revoked)
    {
        $this->container['revoked'] = $revoked;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return string
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param string $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return string
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param string $valid_to valid_to
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets components
     *
     * @return string[]
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param string[] $components components
     *
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets form_factor
     *
     * @return string
     */
    public function getFormFactor()
    {
        return $this->container['form_factor'];
    }

    /**
     * Sets form_factor
     *
     * @param string $form_factor form_factor
     *
     * @return $this
     */
    public function setFormFactor($form_factor)
    {
        $allowedValues = $this->getFormFactorAllowableValues();
        if (!is_null($form_factor) && !in_array($form_factor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'form_factor', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['form_factor'] = $form_factor;

        return $this;
    }

    /**
     * Gets public_registration_id
     *
     * @return string
     */
    public function getPublicRegistrationId()
    {
        return $this->container['public_registration_id'];
    }

    /**
     * Sets public_registration_id
     *
     * @param string $public_registration_id public_registration_id
     *
     * @return $this
     */
    public function setPublicRegistrationId($public_registration_id)
    {
        $this->container['public_registration_id'] = $public_registration_id;

        return $this;
    }

    /**
     * Gets mobile_app
     *
     * @return \Exivo\Model\MobileApp
     */
    public function getMobileApp()
    {
        return $this->container['mobile_app'];
    }

    /**
     * Sets mobile_app
     *
     * @param \Exivo\Model\MobileApp $mobile_app mobile_app
     *
     * @return $this
     */
    public function setMobileApp($mobile_app)
    {
        $this->container['mobile_app'] = $mobile_app;

        return $this;
    }

    /**
     * Gets install_notification
     *
     * @return bool
     */
    public function getInstallNotification()
    {
        return $this->container['install_notification'];
    }

    /**
     * Sets install_notification
     *
     * @param bool $install_notification install_notification
     *
     * @return $this
     */
    public function setInstallNotification($install_notification)
    {
        $this->container['install_notification'] = $install_notification;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets callback_uri
     *
     * @return string
     */
    public function getCallbackUri()
    {
        return $this->container['callback_uri'];
    }

    /**
     * Sets callback_uri
     *
     * @param string $callback_uri callback_uri
     *
     * @return $this
     */
    public function setCallbackUri($callback_uri)
    {
        $this->container['callback_uri'] = $callback_uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


