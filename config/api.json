{"swagger":"2.0","info":{"version":"1.1.0","title":"exivo api documentation","description":"The exivo API lets you manage an exivo site. To be allowed to\nuse the API the Connection service needs to be activated. For every HTTP request\nthe `siteId`, an `API_KEY` and the corresponding `API_SECRET` are required. All this\ninformation can be found in the [exivo app](https://customer.exivo.io/credentials).\nA new `API_KEY` can be generated in the app. Please note that `API_SECRET` is a confidential\ninformation and should be stored securely. After closing the dialogue or refreshing the page the\nsecret can't be displayed anymore. If the secret is lost, a new key needs to be generated and the\nold must be deleted."},"host":"api.exivo.io","basePath":"/v1","schemes":["https"],"tags":[{"name":"site","description":"A site in exivo represents a building or an area of ground assigned to a customer.\nAll assets like components, doors, persons, etc. are assigned to a site."},{"name":"person","description":"In exivo, the access to a site is managed over persons. A person is granted access\nto the site and this access can be revoked anytime. The person endpoint allows to create new persons,\nlist existing ones and update or delete them. For a person to be able to enter a door, an access\nmedium and the access group must be assigned."},{"name":"medium","description":"To open a door, a person needs an access medium. Over the medium endpoint all\nregistered media can be listed, assigned to and unassigned from persons. A medium can only\nbe assigned to one person. A person can have several active media assigned. Media in the state\n*assignable* can be assigned to a person and then become *active*. If a person with an\nactive medium is assigned a new medium, the new medium becomes active as well.\nIf a medium is *damaged* or *lost* it can be attached to persons after recycling it."},{"name":"digitalKey","description":"To open a door via digital key, the person needs an digital key assigned. Over the `digitalKey` endpoint, all registered digital keys can be listed, assigned to and unassigned from persons. A digital key can only\nbe assigned to one person."},{"name":"accessGroup","description":"Access zones are a grouping of doors. Persons need explicit permission assigned via access groups to\nbe allowed to open doors of access zones (Visitor service is handled differently: see *visit*).\nThe endpoint allows to list all the access zones with their names and ids. Changing of access zones would\nneed to be done in the exivo app."},{"name":"component","description":"Every component in exivo corresponds to a door of the site. This endpoint allows\nto list all the doors with all the information about the components, unique id, identifier,\ntype, operating mode and the assigned access zone. The exivo app has to be used to change\nthe components information or configuration."},{"name":"accessZone","description":"Access zones are a grouping of doors. Persons need explicit permission assigned via access groups to\nbe allowed to open doors of access zones (Visitor service is handled differently: see *visit*).\nA door with multiple media-readers can be in more than one zone.\nThe endpoint allows to list all the access zones with their names and ids. Changing of access zones would\nneed to be done in the exivo app."},{"name":"visit","description":"The visitor feature allows to give permission to enter doors over email, SMS.\nIf you want to notify a person on your own, you can also omit email and SMS completely. The\nrecipient receives a link, which allows him to open doors. The endpoint allows to list the existing\nvisits, create new ones or revoke the existing ones. If a visit is created for a component with an alarm\nin its `templateIdentifier`, it's possible that a false alarm will be triggered if the visit occurs\nduring the time when the alarm is activated."},{"name":"timeProfile","description":"Time profiles are predefined time ranges, which will be assigned to access groups bundled\nwith access zones. A time profile restricts the accessibility of the corresponding access zone for\neveryone within the specified access group. This endpoint allwos to list the time profiles with start and end as well as the pin."},{"name":"specialDay","description":"Special days are days with a special purpose and can be\ndefined per site. There are two types of special days (A and B), and the type of a special day\ncan be used in time profiles along with week day numbers. The endpoint allows to list or change special days."},{"name":"accessLog","description":"All door-related events. The endpoint allows to list access log relevant to person/s or component/s."},{"name":"swisspass","description":"A service for retrieving the SwissPass customer data and SwissPass card infromation."}],"security":[{"basicAuth":[]}],"consumes":["application/json"],"produces":["application/json"],"paths":{"/{siteId}/info":{"x-swagger-router-controller":"site","get":{"summary":"returns general site info","description":"Get general site info by `siteId`.\nReturns an object with the properties `id`, `name`, `language` and `timeZone`.","tags":["site"],"operationId":"getSiteInfo","produces":["application/json"],"parameters":[{"$ref":"#/parameters/siteIdParam"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/siteInfo"}}}}},"/{siteId}/swisspass/search":{"x-swagger-router-controller":"swisspass","post":{"summary":"returns swisspass customer and card data","description":"The service requires the Swiss postal code and the card ID of a customer, and returns\nthe personal data and card access tokens (ISO15693 and ISO14443A) of the corresponding customer.\nReturns 500 if the data couldn't be resolved successfully. Please note, that when the access tokens\nwere sucessfuly registered as access media, one needs to register the access service at SwissPass API\nusing the provided POST method (see below).","tags":["swisspass"],"operationId":"search","produces":["application/json"],"parameters":[{"$ref":"#/parameters/siteIdParam"},{"name":"body","in":"body","required":true,"schema":{"type":"object","properties":{"postalCode":{"type":"integer","description":"Swiss postal code of the customer","minimum":1000,"maximum":9999},"cardId":{"description":"Id of the SwissPass card","type":"string"}}}}],"responses":{"200":{"description":"successful operation","schema":{"type":"object","properties":{"firstName":{"type":"string"},"lastName":{"type":"string"},"gender":{"enum":["male","female","notspecified"]},"uidISO14443":{"type":"string"},"uidISO15693":{"type":"string"},"customerId":{"type":"string"}}}}}}},"/{siteId}/swisspass/register":{"x-swagger-router-controller":"swisspass","post":{"summary":"registers exivo services in SwissPass customer's account","description":"SwissPass API requires every service to register itself so that it appears in the\nlist of services in customer's profile. The call returns the id of the record.","tags":["swisspass"],"operationId":"register","produces":["application/json"],"parameters":[{"$ref":"#/parameters/siteIdParam"},{"name":"body","in":"body","description":"customer and service information","required":true,"schema":{"type":"object","properties":{"name":{"type":"string","description":"The name of the access service as it will appear in customer's profile."},"customerId":{"type":"string","description":"Customer id which is returned by the GET endpoint."}}}}],"responses":{"200":{"description":"successful operation","schema":{"type":"object","properties":{"recordId":{"type":"string"}}}}}}},"/{siteId}/person":{"x-swagger-router-controller":"person","get":{"summary":"get all persons","description":"Returns an array with all the persons of the site. If the site\ndoesn't have any persons, an empty array is returned. A person consist\nof `id`, `firstName`, `lastName`, `gender`, `email`, `language`, `info`,\n`phoneNumber`, `entryDate`, `exitDate`, `revoked`, `accessGroupId` and\n`media`. The `id` is the uuid string that uniquely identifies the\nperson. The property `gender` contains the gender of the person and is a string\nwith the value *male*, *female* or *unspecified*. `entryDate` and `exitDate`\nare optional properties and define the time frame during which the person has\naccess. They are formatted in UTC and after the RFC 3339 standard. After the\n`exitDate` the access of the person is automatically revoked. The property\n`revoked` is a boolean that is false if the person has access and\ntrue if not. The properties `email`, `phoneNumber`, `info`, `entryDate`,\n`exitDate` are optional and can contain the value `null`. If the person is\nassigned to an accessGroup there's an additional property `accessGroupId`.\nThe `mediumId` of every medium assigned to the person can be found in the\n`media` array. The optional query parameters `skip`, `limit`,\n`sort` and `sortDir` can be used for pagination.","tags":["person"],"operationId":"getPersons","produces":["application/json"],"parameters":[{"$ref":"#/parameters/siteIdParam"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/person"}}}}},"post":{"summary":"Creates a new person","description":"Create a new person. This request takes a json object with the\nproperties: `firstName`, `lastName`, `gender`, `language`, `entryDate`,\n`exitDate`, `email`, `phoneNumber`, `info`. The properties `firstName`\nand `lastName` are the name of the person and are alway required. The property\n`gender` accepts one of the *strings*: *\"unspecified\", \"male\", \"female\"*.\nIf it's not defined it defaults to *\"unspecified\"*. The `language` property\naccepts the *string* values: *\"de\", \"en\", \"fr\", \"it\", \"nb\", \"es\", \"da\", \"fi\", \"fo\", \"nl\", \"sv\"*.\nIf it's not defined it defaults to *\"en\"*. All the other properties will be\nset to `null` if not defined. The `phoneNumber` property needs to be correctly\nformatted phone number and the `email` property a correctly formatted email\naddress. The generated `id` of the person gets returned with the response of\nthis request.","operationId":"addPerson","tags":["person"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"person properties","required":true,"schema":{"$ref":"#/definitions/personPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/person"}}}}},"/{siteId}/person/{personId}":{"x-swagger-router-controller":"person","get":{"summary":"get person by ID","description":"Returns the person with the given `personId`. If the site doesn't have\na person with this id the status code 404 and an empty body is returned. A person consist\nof `id`, `firstName`, `lastName`, `gender`, `email`, `language`, `info`,\n`phoneNumber`, `entryDate`, `exitDate`, `revoked`, `accessGroupId` and\n`media`. The `id` is the uuid string that uniquely identifies the\nperson. The property `gender` contains the gender of the person and is a string\nwith the value *male*, *female* or *unspecified*. `entryDate` and `exitDate`\nare optional properties and define the time frame during which the person has\naccess. They are formatted in UTC and after the RFC 3339 standard. After the\n`exitDate` the access of the person is automatically revoked. The property\n`revoked` is a boolean that is false if the person has access and\ntrue if not. The properties `email`, `phoneNumber`, `info`, `entryDate`,\n`exitDate` are optional and can contain the value `null`. If the person is\nassigned to an accessGroup there's an additional property `accessGroupId`.\nThe `mediumId` of every medium assigned to the person can be found in the\n`media` array.","tags":["person"],"operationId":"getPerson","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to return","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/person"}}}},"post":{"summary":"Updates a person in the store","description":"Update `firstName`, `lastName`, `gender`, `email`, `phoneNumber`,\n`language`, `info`, `entryDate` or `exitDate`. Only the submitted properties are\nchanged. Any property that's not submitted stays the same. To delete one of the optional\nproperties `entryDate`, `exitDate`, `email`, or `phoneNumber`, the\nvalue `null` has to be submitted instead of a *string*. The property `gender` only\naccepts the *string* values: *\"unspecified\", \"male\", \"female\". The property `language` only\naccepts the *string* values: *\"de\", \"en\", \"fr\", \"it\", \"nb\", \"es\"*.","tags":["person"],"operationId":"changePersonInfo","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to update","required":true,"type":"string"},{"name":"body","in":"body","description":"person properties","required":true,"schema":{"$ref":"#/definitions/personPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/person"}}}},"delete":{"summary":"Deletes a person","description":"Delete a person with `personId` from the site. If the person\nwas assigned to an access group it is automatically removed and any media\nassigned to the person are automatically returned and newly assignable. If\nno person with the `personId` exists for this site an error with status\ncode 400 is returned.","tags":["person"],"operationId":"deletePerson","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to return","required":true,"type":"string"}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/revoke":{"x-swagger-router-controller":"person","post":{"summary":"Revoke access of a person","description":"Revoke the access of a person with `personId` to the site. The `revoked`\nstatus switches to true and the person is no longer able to open any doors. If the persons\naccess already is revoked, the API will return an error with status code 400 and the message\nthat the person already is revoked. If no person with this `personId` is found on the site\nan error with status code 400 is returned and the message, that no person with this id exists.","tags":["person"],"operationId":"revokeAccess","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to delete","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/unrevoke":{"x-swagger-router-controller":"person","post":{"summary":"Unrevoke access of a person","description":"Unrevoke the access of a person with `personId` to the site. The `revoked`\nstatus switches to false and the person is able to open any doors according to his access\ngroup. If the persons isn't revoked the API will return an error with status code 400 and\nthe message that the access is not revoked. It's possible to unrevoke a person after the\n`exitDate`. If no person with this `personId` is found on the site an error with status\ncode 400 is returned and the message, that no person with this id exists.","tags":["person"],"operationId":"unrevokeAccess","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to return","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/pincode":{"x-swagger-router-controller":"person","post":{"summary":"Sets a pinCode for the person","description":"Sets a `pinCode` for the person. The `pinCode` must be a value having 4-6 digits.","tags":["person"],"operationId":"setPinCode","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to return","required":true,"type":"string"},{"name":"body","in":"body","description":"pinCode","required":true,"schema":{"type":"object","properties":{"pinCode":{"type":"string","pattern":"^[0-9]{4,6}$"}}}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/person"}}}},"delete":{"summary":"Resets a pinCode for the person","description":"Resets a `pinCode` for the person.","tags":["person"],"operationId":"resetPinCode","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to return","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/person"}}}}},"/{siteId}/accesslog/person":{"x-swagger-router-controller":"person","get":{"summary":"get persons access log","description":"","tags":["accessLog","person"],"operationId":"getPersonAccessLog","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"},{"name":"from","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-22\""},{"name":"to","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-23\""}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/accessLogEntry"}}}}}},"/{siteId}/accesslog/person/{personId}":{"x-swagger-router-controller":"person","get":{"summary":"get person's access log","description":"","tags":["accessLog","person"],"operationId":"getPersonAccessLogForOne","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person to return","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"},{"name":"from","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-22\""},{"name":"to","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-23\""}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/accessLogEntry"}}}}}},"/{siteId}/accesslog/component":{"x-swagger-router-controller":"component","get":{"summary":"get components access log","description":"","tags":["accessLog","component"],"operationId":"getComponentAccessLog","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"},{"name":"from","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-22\""},{"name":"to","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-23\""}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/accessLogEntry"}}}}}},"/{siteId}/accesslog/component/{componentId}":{"x-swagger-router-controller":"component","get":{"summary":"get component's access log","description":"","tags":["accessLog","component"],"operationId":"getComponentAccessLogForOne","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"componentId","in":"path","description":"ID of component to return","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"},{"name":"from","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-22\""},{"name":"to","in":"query","required":false,"type":"string","format":"date","description":"e.g. \"2013-10-23\""}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/accessLogEntry"}}}}}},"/{siteId}/medium":{"x-swagger-router-controller":"medium","get":{"summary":"get all media","description":"Returns an array with all the media of the site. If the site\ndoesn't have any media registered, an empty array is returned. A medium consist\nof `id`, (`cid` or `uid`), `formFactor`, `state`, `personId`, `caption` and\n`description`. The `id` is the uuid string that uniquely identifies the\nmedium in the exivo system. The `cid` is a hexadecimal card number found on\nall the smart media: *(key fob, badge, smart key)*. The `uid` is a hexadecimal card number found on\nall the insecure media. A key doesn't have a cid and a uid.\nThe `formFactor` describes to type of the medium. There are four types *keyfob*,\n*badge*, *smartkey* and *key*. The `state` can be *assignable*, *active*,\n*blocked*, *damaged* or *lost*. The `personId` property contains the id of the\nperson the medium is assigned to. If no person is assigned the field is `null`.\nThe `caption` and the `description` properties are only used for keys. They\nhelp to identify a key. The optional query parameters `skip`, `limit`,\n`sort` and `sortDir` can be used for pagination.","tags":["medium"],"operationId":"getMedia","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/medium"}}}}},"post":{"summary":"Register a new medium","description":"Register a new medium. This request takes a json object with the\nproperties: `cid`, `formFactor`. The property `cid` is the card number (no leading zeros)\nand the property `formFactor` accepts one of the *strings*: *\"badge\", \"keyfob\", \"smartkey\"*.\nThe generated `id` of the medium gets returned with the response of\nthis request.","operationId":"registerMedium","tags":["medium"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"medium properties","required":true,"schema":{"$ref":"#/definitions/mediumPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/medium"}}}}},"/{siteId}/medium/{mediumId}":{"x-swagger-router-controller":"medium","get":{"summary":"get medium by ID","description":"Returns the medium with the given id. If the site doesn't have\na registered medium with this id the status code 404 and an empty body is\nreturned. A medium consist of `id`, `cid`, `formFactor`, `state`,\n`personId`, `caption` and `description`. The `id` is the uuid string\nthat uniquely identifies the medium in the exivo system. The `cid` is a\nhexadecimal card number found on all the smart media: *(key fob, badge, smart key)*.\nA key doesn't have an cid. The `formFactor` describes to type of the medium.\nThere are four types *keyfob*, *badge*, *smartkey* and *key*. The `state` can\nbe *assignable*, *active*, *blocked*, *damaged* or *lost*. The `personId`\nproperty contains the id of the person the medium is assigned to. If no person\nis assigned the field is `null`. The `caption` and the `description`\nproperties are only used for keys. They help to identify a key.","tags":["medium"],"operationId":"getMedium","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium to return","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/medium"}}}},"delete":{"summary":"Unregister a medium","description":"Unregister a medium with the given id. If the medium\nwas assigned to a person it make sure you return it. If\nno medium with the `mediumId` exists for this site an error with status\ncode 400 is returned.","tags":["medium"],"operationId":"unregisterMedium","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium to return","required":true,"type":"string"}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/medium/{mediumId}/activate":{"x-swagger-router-controller":"medium","post":{"summary":"Activate medium by id","operationId":"activateMedium","tags":["medium"],"consumes":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","description":"activate digital key properties","required":false,"schema":{"$ref":"#/definitions/activateMediumPayload"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/medium/{mediumId}/block":{"x-swagger-router-controller":"medium","post":{"summary":"Block medium by id","operationId":"blockMedium","tags":["medium"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/digitalKey":{"x-swagger-router-controller":"digitalKey","get":{"summary":"get all assigned digital keys","description":"Returns an array with all the digital keys of the site.\nIf the site doesn't have any digital keys registered, an empty array is returned.\nA digital key consist of `id`, `cid`, `formFactor`, `state`, `personId`, `caption` and `description`.\nThe `id` is the uuid string that uniquely identifies the digital key in the exivo system.\nThe `cid` is a hexadecimal number assigned to the digital key by Legic mobile access service.\nThe `formFactor` describes to type of the digital key. There are three types of digital keys: *ma-phone*, *ma-email* and *ma-custom*.\nThe `state` can be *assignable*, *assignableButPending*, *assignedButPending* , *assigned*, *active*, *blocked*, *damaged* or *lost*.\nThe `personId` property contains the id of the person the digital key is assigned to. If no person is assigned the field is `null`.\nThe optional query parameters `skip`, `limit`, `sort` and `sortDir` can be used for pagination.","tags":["digitalKey"],"operationId":"getDigitalKeys","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/digitalKey"}}}}},"post":{"summary":"Register a new digital key","description":"Register a new digital key.\nThis request takes a json object with the properties: `publicRegistrationId`, `mobileAppId` and `formFactor`.\nThe property `publicRegistrationId` is #phone, #mail or #custom where the mobile access key will be sent.\nThe property `mobileAppId` is the mobile application installed on the mobile phone where the digital key will be stored.\nThe property `formFactor` accepts one of the strings *strings*: *\"ma-phone\", \"ma-email\" or \"ma-custom\"*.\nThe property `installNotification` toggles if a notification is sent in case user has no app installed on mobile device.\nThe property `callbackUri` will be executed if `formFactor` is \"ma-custom\" and needs to be notified that no app is installed on mobile device.\nThe generated `id` of the medium gets returned with the response of this request.","operationId":"registerDigitalKey","tags":["digitalKey"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"medium properties","required":true,"schema":{"$ref":"#/definitions/digitalKeyPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/digitalKey"}}}}},"/{siteId}/digitalKey/{mediumId}":{"x-swagger-router-controller":"digitalKey","get":{"summary":"get digital key by ID","description":"Returns the digital key with the given id.\nIf the site doesn't have a registered digital key with this id the status code 404 and an empty body is returned.\nA medium consist of `id`, `cid`, `formFactor`, `state`, `personId`, `caption` and `description`.\nThe `id` is the uuid string that uniquely identifies the digital key in the exivo system.\nThe `cid` is a hexadecimal number assigned to digital key by Legic mobile access service.\nThe `formFactor` describes to type of the medium. There are three types of digital keys: *ma-phone*, *ma-email* and *ma-custom* (UID format).\nThe `state` can be *assignable*, *assignableButPending*, *assignedButPending* , *assigned*, *active*, *blocked*, *damaged* or *lost*.\nThe `personId` property contains the id of the person the digital key is assigned to. If no person is assigned the field is `null`.\nThe optional query parameters `skip`, `limit`, `sort` and `sortDir` can be used for pagination.","tags":["digitalKey"],"operationId":"getDigitalKey","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of digital key to return","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/digitalKey"}}}},"delete":{"summary":"Unregister a digital key","description":"Unregister a digital key with the given id.\nIf the digital key was assigned to a person it make sure you return it.\nIf no digital key with the `mediumId` exists for this site an error with status code 400 is returned.","tags":["digitalKey"],"operationId":"unregisterDigitalKey","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium to return","required":true,"type":"string"}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/digitalKey/{mediumId}/activate":{"x-swagger-router-controller":"digitalKey","post":{"summary":"Activate digital key by id","operationId":"activateDigitalKey","tags":["digitalKey"],"consumes":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","description":"activate digital key properties","required":false,"schema":{"$ref":"#/definitions/activateDigitalKeyPayload"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/digitalKey/{mediumId}/block":{"x-swagger-router-controller":"digitalKey","post":{"summary":"Block digital key by id","operationId":"blockDigitalKey","tags":["digitalKey"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/accessgroup":{"x-swagger-router-controller":"accessGroup","get":{"summary":"get all access groups","description":"Returns an array with all the access groups of the site. If the site\ndoesn't have any access groups an empty array is returned. An access group consists of\n`id`, `name` and `persons`. The `id` is the uuid string, that uniquely identifies\nthe access group. The `name` property contains the name of the access group. The\n`persons` property contains an array of all the ids of persons assigned to this group.\nThe optional query parameters `skip`, `limit`, `sort` and `sortDir` can be used\nfor pagination.","tags":["accessGroup"],"operationId":"getAccessGroups","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/accessgroup"}}}}},"post":{"summary":"Define a new accessGroup","description":"Define a new accessGroup. This request takes a json object with the\nproperties: `name`. The property `name` is the name of the access group.\nThe generated `id` of the accessGroup gets returned with the response of\nthis request.","operationId":"defineAccessGroup","tags":["accessGroup"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"access group properties","required":true,"schema":{"$ref":"#/definitions/accessGroupPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/accessgroup"}}}}},"/{siteId}/accessgroup/{accessGroupId}":{"x-swagger-router-controller":"accessGroup","get":{"summary":"get access group by ID","description":"Returns the access zone with the given id. If no access zone with\nthis id exists a 404 status code and a empty body is returned. An access group consists of\n`id`, `name` and `persons`. The `id` is the uuid string, that uniquely identifies\nthe access group. The `name` property contains the name of the access group. The\n`persons` property contains an array of all the ids of persons assigned to this group.","tags":["accessGroup"],"operationId":"getAccessGroup","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"accessGroupId","in":"path","description":"ID of access group to return","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/accessgroup"}}}},"post":{"summary":"update an access group","description":"Update name of an access group by `accessGroupId`.","tags":["accessGroup"],"operationId":"updateAccessGroup","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"accessGroupId","in":"path","description":"ID of access group to update","required":true,"type":"string"},{"name":"body","in":"body","description":"access groups properties","required":true,"schema":{"$ref":"#/definitions/accessGroupPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/accessgroup"}}}},"delete":{"summary":"delete an access group","description":"Delete an access group by `accessGroupId`.\nBefore an access group can be deleted all persons must be unassigned otherwise an error with status code 204 is returned.\nIf no access group with the `accessGroupId` exists for this site an error with status code 400 is returned.","tags":["accessGroup"],"operationId":"deleteAccessGroup","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"accessGroupId","in":"path","description":"ID of access group to delete","required":true,"type":"string"}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/accessgroup/{accessGroupId}/accesszone/{accessZoneId}":{"x-swagger-router-controller":"accessGroup","post":{"summary":"assign an access zone with a time profile","description":"Assignes a new access zone to the access group with a time profile id in the body.","tags":["accessGroup"],"operationId":"assignAccessZone","produces":["application/json"],"consumes":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"accessGroupId","in":"path","description":"ID of access group to change","required":true,"type":"string"},{"name":"accessZoneId","in":"path","description":"ID of access zone to assign","required":true,"type":"string"},{"in":"body","required":true,"name":"timeProfileId","description":"The id of the time profile to use or ALWAYS or NEVER.","schema":{"type":"string"}}],"responses":{"204":{"description":"successful operation"}}},"delete":{"summary":"unassign the access zone from the access group","tags":["accessGroup"],"operationId":"unassignAccessZone","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"accessGroupId","in":"path","description":"ID of access group to change","required":true,"type":"string"},{"name":"accessZoneId","in":"path","description":"ID of access zone to assign","required":true,"type":"string"}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/assign/accessgroup/{accessGroupId}":{"x-swagger-router-controller":"accessGroup","post":{"summary":"Assign access group to person","description":"Assign an access group with `accessGroupId` to a person with `personId`.\nThe person receives the access rights of this group. A person can only be assigned to one\naccess group. If the person has already an assigned access group, the old group gets unassigned\nand the new group gets assigned. If the `personId` or the `accessGroupId` don't exists on\nthe site an error status code 400 and an error message is returned. If a person is already assigned\nto the access group, an error with code 400 is returned.","tags":["person","accessGroup"],"operationId":"assignAccessGroup","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person","required":true,"type":"string"},{"name":"accessGroupId","in":"path","description":"ID of access group","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/unassign/accessgroup":{"x-swagger-router-controller":"accessGroup","post":{"summary":"Unassign access group from person","description":"Unassign the access group from the person with the `personId`.\nThis person looses access to the site. If the person has no access group assigned\nan error message with status code 400 is returned.","tags":["person","accessGroup"],"operationId":"unassignAccessGroup","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/assign/medium/{mediumId}":{"x-swagger-router-controller":"medium","post":{"summary":"Assign medium to person","description":"Assign a medium with `mediumId` to a person with the `personId`.\nThe medium switches in state `active` and can be used to access the site\nas specified in the persons access group. If the person already has a medium\nassigned it automatically switches into `state` blocked and can't be used anymore.\nThe medium has to be registered on the site and in `state` `assignable`, else error with status code 400 is returned.","tags":["person","medium"],"operationId":"assignMedium","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"$ref":"#/definitions/assignMediumPayload"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/unassign/medium/{mediumId}":{"x-swagger-router-controller":"medium","post":{"summary":"Unassign medium from person","description":"Unassign the medium with `mediumId` from the person with the `personId`.\nThe medium gets removed from the person and switches to `state` assignable.\nIf no person with `personId` exists on the site or no medium with `mediumId` is\nregistered to the site an error with status code 400 is returned.","tags":["person","medium"],"operationId":"unassignMedium","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/assign/digitalKey/{mediumId}":{"x-swagger-router-controller":"digitalKey","post":{"summary":"Assign digital key to person","description":"Assign a medium with `mediumId` to a person with the `personId`.\nIf The medium switches in state `active` it can be used to access the site as specified in the persons access group.\nIf the person already has the digital key assigned it automatically switches into `state` blocked and can't be used anymore.\nThe medium has to be registered on the site and in `state` `assignable`, else error with status code 400 is returned.","tags":["person","digitalKey"],"operationId":"assignDigitalKey","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"$ref":"#/definitions/assignMediumPayload"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/person/{personId}/unassign/digitalKey/{mediumId}":{"x-swagger-router-controller":"digitalKey","post":{"summary":"Unassign digital key from person","description":"Unassign the digital key with `mediumId` from the person with the `personId`.\nThe medium gets removed from the person and switches to `state` assignable.\nIf no person with `personId` exists on the site or no digital key with `mediumId` is registered to the site an error with status code 400 is returned.","tags":["person","digitalKey"],"operationId":"unassignDigitalKey","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"personId","in":"path","description":"ID of person","required":true,"type":"string"},{"name":"mediumId","in":"path","description":"ID of medium","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/accessZone":{"x-swagger-router-controller":"accessZone","get":{"summary":"get all access zones","description":"Returns an array with all the access zones of the site. If the site\ndoesn't have any access zones an empty array is returned. An access zone consist\nof `id`, `name` and `color`. The `id` is the uuid string\nthat uniquely identifies the access zone. The `name` property contains the name of the\naccess zone and the `color` property contains the name of the color which is used\nin the exivo app. The optional query parameters `skip`, `limit`,\n`sort` and `sortDir` can be used for pagination.","tags":["accessZone"],"operationId":"getAccessZones","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/accessZone"}}}}}},"/{siteId}/accesszone/{accessZoneId}":{"x-swagger-router-controller":"accessZone","get":{"summary":"get access zone by ID","description":"Returns the access zone with the given id. If no access zone with\nthis id exists a 404 status code and a empty body is returned. An access zone\nconsist of `id`, `name` and `color`. The `id` is the uuid string that uniquely\nidentifies the access zone. The `name` property contains the name of the access\nzone and the `color` property contains the name of the color which is used\nin the exivo app.","tags":["accessZone"],"operationId":"getAccessZone","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"accessZoneId","in":"path","description":"ID of access zone to return","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/accessZone"}}}}},"/{siteId}/component":{"x-swagger-router-controller":"component","get":{"summary":"get all components","description":"Returns an array with all components of the site. If the site\ndoesn't have any components with assigned hardware an empty array is returned.\nA component consist of `id`, `identifier`, `labelling`, `remarks`,\n`accessZones`, `mode` and `templateIdentifier`. The `id` is the uuid string\nthat uniquely identifies the component. The `identifer` is a string used to\nname the component. The `labeling` property allows further descriptions\nof the component and it's location. The `remarks` property can contain\nfurther information about the component. The `accessZones` property\ncontains an array with up to 2 elements. Each element is an accessZoneId\nin the form of a uuidv4 string. The `templateIdentifier` shows the type\nof the component. The optional query parameters `skip`, `limit`,\n`sort` and `sortDir` can be used for pagination.","tags":["component"],"operationId":"getComponents","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/component"}}}}}},"/{siteId}/component/{componentId}":{"x-swagger-router-controller":"component","get":{"summary":"get component by ID","description":"Returns the component with the given id. If no component with\nthis id exists a 404 status code and a empty body is returned. A component\nconsist of `id`, `identifier`, `labelling`, `remarks`, `accessZones`, `mode`\nand `templateIdentifier`. The `id` is the uuid string that uniquely identifies\nthe component. The `identifer` is a string used to name the component. The\n`labeling` property allows further descriptions of the component and it's\nlocation. The `remarks` property can contain further information about the\ncomponent. The `accessZones` property contains an array with up to 2 elements.\nEach element is an accessZoneId in the form of a uuidv4 string.\nThe `templateIdentifier` shows the type of the component.","tags":["component"],"operationId":"getComponent","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"componentId","in":"path","description":"ID of component to return","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/component"}}}}},"/{siteId}/component/{componentId}/unlock":{"x-swagger-router-controller":"component","post":{"summary":"Unlock a door","description":"Unlock a door with `componentId`.\nA request to unlock the door will be sent. This is only a request so there is no guarantee the door will be unlocked.","tags":["component"],"operationId":"unlock","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"componentId","in":"path","description":"ID of component","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"$ref":"#/definitions/unlockPayload"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/component/{componentId}/mode":{"x-swagger-router-controller":"component","post":{"summary":"Set operating mode of a component","description":"Set operating mode of a component with `componentId`.","tags":["component"],"operationId":"setComponentOperatingMode","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"componentId","in":"path","description":"ID of component","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"$ref":"#/definitions/setOperatingModePayload"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/visit":{"x-swagger-router-controller":"visit","get":{"summary":"Retrieve a list with all the visits.","description":"Retrieve an array of visits. Every visit consists of `id`, `name`,\n`message`, `email`, `smsNr`, `code`, `validFrom`, `validTo`, `components`,\n`expired`, `revoked`. If a sites has no visits an empty array is returned.\nThe `id` is an uuidv4 string that uniquely identify a site. Either the `email` or\nthe `smsNr` property has to be supplied to specify where the visit is sent.\nThe property `code` is a 4-6 digit pin to offer a second authentication factor.\nThe code is not send in the email or the sms. The `validFrom` and the `validTo`\nproperties are RFC 3339 UTC timestamps which specify the time frame of the visit.\nWhen the visit expires the `expired` property is set to true. The `components`\nproperty is an array of all the componentIds the visitor is allowed to open. If\neither of the boolean properties `expired` or `revoked` is true the visitor\nhas no access anymore. The `name` property is a optional property to identify\nand log the visitor. With the optional `message` property the message sent to\nthe visitor can be customized. The optional query parameters `skip`, `limit`,\n`sort` and `sortDir` can be used for pagination.","tags":["visit"],"operationId":"getVisits","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/visit"}}}}},"post":{"summary":"Creates a new visit","description":"Create new visits that allow visitor doors remotly with a link and a code.\nA new visit consists of `email`, `smsNr`, `code`, `validFrom`, `validTo`,\n`components`, `name` and `message`. `code`, `validFrom`, `validTo`,\n`components` and either `email` or `smsNr` are required properties. To define\nwhere a visit invitation is sent to specify either the `smsNr` or the `email`\nproperty. Only one is needed and if both are specified only a sms is sent out. The\n`smsNr` needs to be a string that represents a correct phone number. The `email`\nproperty demands a correctly formated email address.\nThe `code` is a 4-6 digit number and functions as second factor to secure the doors. It has to be entered\nbefore a door can be opened. It isn't send with the link and should be communicated\nover an other communication channel. The `validFrom` to `validTo` properties\ndefine the time frame during which the door can be opened. The time has to be UTC\nand according to the RFC 3339 definition. The `validTo` time needs to be in\nthe future. The `components` property consists an array with all the ids of\ncomponents the visitor is allowed open. The optional `name` property helps\nto identify and log the visits. With the optional `message` property the\ninvitation message can be customized. If a visit is created for a component with alarm\nin it's `templateIdentifier` it's possible that a false alarm is triggered if the visit occurs\nduring a time the alarm is activated.","operationId":"delegateUnlockDoor","tags":["visit"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"visit properties","required":true,"schema":{"$ref":"#/definitions/visitPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/visit"}}}}},"/{siteId}/visit/{visitId}":{"x-swagger-router-controller":"visit","get":{"summary":"Retrieve a visit.","description":"Retrieve a visit. A visit consists of `id`, `name`,\n`message`, `email`, `smsNr`, `code`, `validFrom`, `validTo`, `components`,\n`expired`, `revoked`. If a sites has no visits an empty array is returned.\nThe `id` is an uuidv4 string that uniquely identify a site. Either the `email` or\nthe `smsNr` property has to be supplied to specify where the visit is sent.\nThe property `code` is a 4-6 digit pin to offer a second authentication factor.\nThe code is not send in the email or the sms. The `validFrom` and the `validTo`\nproperties are RFC 3339 UTC timestamps which specify the time frame of the visit.\nWhen the visit expires the `expired` property is set to true. The `components`\nproperty is an array of all the componentIds the visitor is allowed to open. If\neither of the boolean properties `expired` or `revoked` is true the visitor\nhas no access anymore. The `name` property is a optional property to identify\nand log the visitor. With the optional `message` property the message sent to\nthe visitor can be customized.","tags":["visit"],"operationId":"getVisit","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"visitId","in":"path","description":"ID of visit","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/visit"}}}}},"/{siteId}/visit/{visitId}/revoke":{"x-swagger-router-controller":"visit","post":{"summary":"Revoke visit","description":"Revoke a visit. After a visit has been revoked the visitor can't open a door with\nthe visit link anymore. The visit doesn't get deleted but the `revoked` property is set to true.\nA revoked visit can't be unrevoked, a new visit has to be created.","tags":["visit"],"operationId":"revokeUnlockDoorDelegation","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"visitId","in":"path","description":"ID of visit","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/timeprofile":{"x-swagger-router-controller":"timeProfile","get":{"summary":"get all timeprofiles","description":"Returns all time profiles for the specified site.","tags":["timeProfile"],"operationId":"getTimeProfiles","produces":["application/json"],"parameters":[{"$ref":"#/parameters/siteIdParam"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/timeProfile"}}}}},"post":{"summary":"Creates a new time profile","description":"As body it expects a fully specified time profile containing a name and\nan array of time ranges. A time range consists of a `start` and an `end` point\ndenoting amount of minutes after the midnight (e.g., `360` would be 6 AM, and `1140`\nwould be 7 PM), a `pinRequired` flag, and an array `days` containing week day numbers\n(as strings) from `\"0\"` to `\"6\"` (or `\"a\"`, `\"b\"` for special days), where the time range\nbecomes effective. Where `\"0\"` is sunday and `\"6\"` saturday","operationId":"defineTimeProfile","tags":["timeProfile"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"time profile properties","required":true,"schema":{"$ref":"#/definitions/timeProfilePayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/timeProfile"}}}}},"/{siteId}/timeprofile/{timeProfileId}":{"x-swagger-router-controller":"timeProfile","get":{"summary":"get time profile by ID","tags":["timeProfile"],"operationId":"getTimeProfile","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"timeProfileId","in":"path","description":"ID of time profile to return","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/timeProfile"}}}},"post":{"summary":"Updates the time profile","description":"As body it expects a fully specified time profile like during the creation.","operationId":"redefineTimeProfile","tags":["timeProfile"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"timeProfileId","in":"path","description":"ID of time profile to update","required":true,"type":"string"},{"name":"body","in":"body","description":"time profile properties","required":true,"schema":{"$ref":"#/definitions/timeProfilePayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/timeProfile"}}}},"delete":{"summary":"Deletes a time profile","description":"Delete the time profile from the site. If the time profile\nis assigned to an access group, an error with status code 400 will be returned.","tags":["timeProfile"],"operationId":"removeTimeProfile","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"timeProfileId","in":"path","description":"ID of time profile to delete","required":true,"type":"string"}],"responses":{"204":{"description":"successful operation"}}}},"/{siteId}/specialdays":{"x-swagger-router-controller":"specialDay","get":{"summary":"get all special days","description":"Returns all special days for the specified site as an array of objects containing the date in format `YYYY-MM-DD`\nand the type of the special day (`\"a\"` or `\"b\"`).","tags":["specialDay"],"operationId":"getSpecialDays","produces":["application/json"],"parameters":[{"$ref":"#/parameters/siteIdParam"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/specialDays"}}}},"post":{"summary":"changes the configuration of special days","description":"As body it expects an array of commands, where every command is an object with a `date` in format `YYYY-DD-MM`\nand one of the instructions: `setA`, `setB` or `remove`.","operationId":"changeSpecialDays","tags":["specialDay"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"special day changes","required":true,"schema":{"type":"object"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/specialDays"}}}}},"/{siteId}/digitalKeyVisits":{"x-swagger-router-controller":"digitalKeyVisit","get":{"summary":"Retrieve a list with all the digital key visits.","description":"Retrieve an array of digital key visits. If a sites has no digital key visits, an empty array is returned.\nEach digital key visit consists of:\nThe `id` is an uuidv4 string that uniquely identify a digital key visit.\nThe `validFrom` and the `validTo` properties are RFC 3339 UTC timestamps which specify the time frame of the digital key visit.\nThe `components` property is an array of all the componentIds the visitor is allowed to open.\nThe `expired` or `revoked` property set to true, indicate that the digital key visit is no longer authorized.\nThe `name` property is a optional property to identify the visitor.\nThe `publicRegistrationId.formFactor` is an enum of either 'ma-phone' / 'ma-email' / 'ma-custom'.\nThe `publicRegistrationId.id` is the respective format. If 'ma-phone' is chosen, the id is a phone number in the format: +4179XXXXXXX. If 'ma-custom' is chosen, a uuid v4 must is provided.\nThe `mobileApp.id` must be the legic-ID of the mobile app. The ID can be found within the registered mobile apps.\nThe `installNotification`, indicates whether or not the installNotification was sent. It is a optional message sent to the user in order to inform him of downloading the mobile-app after he created the digital key visit.\nThe `installNotification` was sent over the channel chosen in the `publicRegistrationId.formFactor`, to the receiver chosen in `publicRegistrationId.id`.\nThe `message` is an optional property and enhanced the standard installNotification message.\nThe `callbackUri` was called if provided after the digital key was created and can be used as a webhook.\nThe `skip`, `limit`, `sort` and `sortDir` properties are optional and can be used for pagination.","tags":["digitalKeyVisit"],"operationId":"getDigitalKeyVisits","produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"skip","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"limit","in":"query","description":"for pagination","required":false,"type":"integer","default":0},{"name":"sort","in":"query","description":"for pagination","required":false,"type":"string"},{"name":"sortDir","in":"query","description":"for pagination","required":false,"type":"string","default":"asc"}],"responses":{"200":{"description":"successful operation","schema":{"type":"array","items":{"$ref":"#/definitions/digitalKeyVisit"}}}}},"post":{"summary":"Creates a new digital key visit","description":"Create digital key visits that will be sent to a mobile app.\nThe `name` property is a optional property to identify the visitor.\nThe `components` property is an array of all the componentIds the visitor is allowed to open.\nThe `validFrom` and the `validTo` properties must be RFC 3339 UTC timestamps which specify the time frame of the digital key visit.\nThe `publicRegistrationId.formFactor` must be an enum of either 'ma-phone' / 'ma-email' / 'ma-custom'.\nThe `publicRegistrationId.id` must be in the respective format. If 'ma-phone' is chosen, the id must be a phone number in the format: +4179XXXXXXX. If 'ma-custom' is chosen, a uuid v4 must be provided.\nThe `mobileApp.name` can be used to display the name of the mobile app.\nThe `mobileApp.id` must be the legic-ID of the mobile app. The ID can be found within the registered mobile apps.\nThe `installNotification`, indicates whether or not the installNotification will be sent. It is a optional message sent to the user in order to inform him of downloading the mobile-app after he created the digital key visit.\nThe `installNotification` will be sent over the channel chosen in the `publicRegistrationId.formFactor`, to the receiver chosen in `publicRegistrationId.id`.\nThe `message` is an optional property and enhanced the standard installNotification message.\nThe `callbackUri` is called if provided after the digital key was created and can be used as a webhook.","operationId":"createDigitalKeyVisit","tags":["digitalKeyVisit"],"consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"body","in":"body","description":"digital key visit properties","required":true,"schema":{"$ref":"#/definitions/digitalKeyVisitPayload"}}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/digitalKeyVisit"}}}}},"/{siteId}/digitalKeyVisit/{digitalKeyVisitId}":{"x-swagger-router-controller":"digitalKeyVisit","get":{"summary":"Retrieve a digital key visit.","description":"Retrieve a digital key visit.\nA digital key visit consists of:\nThe `id` is an uuidv4 string that uniquely identify a digital key visit.\nThe `validFrom` and the `validTo` properties are RFC 3339 UTC timestamps which specify the time frame of the digital key visit.\nThe `components` property is an array of all the componentIds the visitor is allowed to open.\nThe `expired` or `revoked` property set to true, indicate that the digital key visit is no longer authorized.\nThe `name` property is a optional property to identify the visitor.\nThe `publicRegistrationId.formFactor` is an enum of either 'ma-phone' / 'ma-email' / 'ma-custom'.\nThe `publicRegistrationId.id` is the respective format. If 'ma-phone' is chosen, the id is a phone number in the format: +4179XXXXXXX. If 'ma-custom' is chosen, a uuid v4 must is provided.\nThe `mobileApp.name` is the name of the mobile app.\nThe `mobileApp.id` must be the legic-ID of the mobile app. The ID can be found within the registered mobile apps.\nThe `installNotification`, indicates whether or not the installNotification was sent. It is a optional message sent to the user in order to inform him of downloading the mobile-app after he created the digital key visit.\nThe `installNotification` was sent over the channel chosen in the `publicRegistrationId.formFactor`, to the receiver chosen in `publicRegistrationId.id`.\nThe `message` is an optional property and enhanced the standard installNotification message.\nThe `callbackUri` was called if provided after the digital key was created and can be used as a webhook.\nThe `skip`, `limit`, `sort` and `sortDir` properties are optional and can be used for pagination.","tags":["digitalKeyVisit"],"operationId":"getDigitalKeyVisit","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"digitalKeyVisitId","in":"path","description":"ID of digital key visit","required":true,"type":"string"}],"responses":{"200":{"description":"successful operation","schema":{"$ref":"#/definitions/digitalKeyVisit"}}}}},"/{siteId}/digitalKeyVisit/{digitalKeyVisitId}/revoke":{"x-swagger-router-controller":"digitalKeyVisit","post":{"summary":"Revoke digital key visit","description":"Revoke a digital key visit. After a digital key visit has been revoked the visitor can't open a door with\nthe mobile app anymore. The digital key visit doesn't get deleted but the `revoked` property is set to true.\nA revoked digital key visit can't be unrevoked, a new one has to be created.","tags":["digitalKeyVisit"],"operationId":"revokeDigitalKeyVisit","consumes":["application/json"],"produces":["application/json"],"parameters":[{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"},{"name":"digitalKeyVisitId","in":"path","description":"ID of digital key visit","required":true,"type":"string"},{"name":"body","in":"body","required":false,"schema":{"type":"object"}}],"responses":{"204":{"description":"successful operation"}}}}},"parameters":{"siteIdParam":{"name":"siteId","in":"path","description":"ID of site to work","required":true,"type":"string"}},"securityDefinitions":{"basicAuth":{"type":"basic","description":"Use `API_KEY` as a user name and `API_SECRET` as a password."}},"definitions":{"siteInfo":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"language":{"type":"string"},"timeZone":{"type":"string"},"type":{"type":"string","default":"exivo","enum":["exivo","real-estate"]}}},"personPayload":{"type":"object","properties":{"firstName":{"type":"string"},"lastName":{"type":"string"},"entryDate":{"type":["string","null"],"format":"dateTime","description":"e.g. \"2002-10-02T15:00:00Z\""},"exitDate":{"type":["string","null"],"format":"dateTime","description":"e.g. \"2002-10-02T15:00:00Z\""},"gender":{"type":"string","enum":["male","female","notspecified"],"default":"notspecified"},"email":{"type":["string","null"],"format":"email"},"language":{"type":"string","default":"en","enum":["da","de","en","es","fi","fo","fr","it","nb","nl","sv"]},"info":{"type":"string"},"phoneNumber":{"type":["string","null"],"pattern":"^(\\+|00)(?:[0-9] ?){6,14}[0-9]$"}}},"person":{"allOf":[{"$ref":"#/definitions/personPayload"},{"properties":{"id":{"type":"string"},"revoked":{"type":"boolean"},"accessGroupId":{"type":"string"},"hasPinCode":{"type":"boolean"},"media":{"type":"array","items":{"type":"string"}}}}]},"mediumPayload":{"type":"object","properties":{"cid":{"type":"string"},"uid":{"type":"string"},"formFactor":{"type":"string","enum":["badge","keyfob","smartkey","insecure"]}}},"medium":{"type":"object","properties":{"id":{"type":"string"},"cid":{"type":"string"},"uid":{"type":"string"},"formFactor":{"type":"string","enum":["badge","keyfob","smartkey","key","insecure"]},"state":{"type":"string","enum":["assignable","active","blocked","damaged","lost"]},"personId":{"type":"string"},"caption":{"type":"string"},"description":{"type":"string"}}},"activateMediumPayload":{"type":"object","properties":{"expireDate":{"type":["string","null"],"format":"dateTime","description":"e.g. \"2002-10-02T15:00:00Z\""}}},"digitalKeyPayload":{"type":"object","properties":{"publicRegistrationId":{"type":"string"},"mobileAppId":{"type":"string","pattern":"^[0-9]*$"},"mobileAppName":{"type":"string"},"formFactor":{"type":"string","enum":["ma-phone","ma-email","ma-custom"]},"installNotification":{"type":"boolean"},"callbackUri":{"type":"string"}},"required":["publicRegistrationId","mobileAppId","formFactor"]},"digitalKey":{"type":"object","properties":{"id":{"type":"string"},"cid":{"type":"string"},"formFactor":{"type":"string","enum":["ma-phone","ma-email","ma-custom"]},"publicRegistrationId":{"type":"string"},"mobileAppId":{"type":"string"},"state":{"type":"string","enum":["assignable","assignableButPending","assignedButPending","assigned","active","blocked","damaged","lost"]},"personId":{"type":"string"}}},"activateDigitalKeyPayload":{"type":"object","properties":{"expireDate":{"type":["string","null"],"format":"dateTime","description":"e.g. \"2002-10-02T15:00:00Z\""}}},"unlockPayload":{"type":"object","properties":{"delegatedUser":{"type":"string"}}},"setOperatingModePayload":{"type":"object","properties":{"mode":{"type":"string","enum":["normal","closed","open","accessControl"]}}},"accessgroup":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"persons":{"type":"array","items":{"type":"string"}},"accessZoneTimeProfiles":{"type":"object"}}},"accessGroupPayload":{"type":"object","properties":{"name":{"type":"string"}},"required":["name"]},"accessZone":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"color":{"type":"string"}}},"component":{"type":"object","properties":{"id":{"type":"string"},"identifier":{"type":"string"},"labelling":{"type":"string"},"remarks":{"type":"string"},"accessZones":{"type":"array","items":{"type":"string"}},"templateIdentifier":{"type":"string"},"ready":{"type":"boolean"},"open":{"type":"boolean"}}},"assignMediumPayload":{"type":"object","properties":{"expireDate":{"type":"string","format":"dateTime","description":"e.g. \"2002-10-02T15:00:00Z\""}}},"visitPayload":{"type":"object","properties":{"code":{"type":"string","pattern":"^[0-9]{4,6}$"},"validFrom":{"type":"string","format":"dateTime"},"validTo":{"type":"string","format":"dateTime"},"components":{"type":"array","items":{"type":"string"}},"name":{"type":"string"},"message":{"type":"string"},"email":{"type":"string","format":"email"},"smsNr":{"type":"string","pattern":"^(\\+|00)(?:[0-9] ?){6,14}[0-9]$"}}},"visit":{"type":"object","properties":{"id":{"type":"string"},"code":{"type":"string","pattern":"^[0-9]{4,6}$"},"validFrom":{"type":"string","format":"dateTime"},"validTo":{"type":"string","format":"dateTime"},"components":{"type":"array","items":{"type":"string"}},"name":{"type":"string"},"message":{"type":"string"},"email":{"type":"string","format":"email"},"smsNr":{"type":"string"},"link":{"type":"string"},"expired":{"type":"boolean"},"revoked":{"type":"boolean"}}},"digitalKeyVisitPayload":{"type":"object","properties":{"name":{"type":"string"},"validFrom":{"type":"string","format":"dateTime"},"validTo":{"type":"string","format":"dateTime"},"components":{"type":"array","items":{"type":"string"}},"formFactor":{"type":"string","enum":["ma-email","ma-phone","ma-custom"]},"publicRegistrationId":{"type":"string"},"mobileApp":{"$ref":"#/definitions/mobileApp"},"installNotification":{"type":"boolean"},"message":{"type":"string"},"callbackUri":{"type":"string"}},"required":["validFrom","validTo","components","publicRegistrationId","formFactor","mobileApp","installNotification"]},"digitalKeyVisit":{"type":"object","properties":{"id":{"type":"string"},"expired":{"type":"boolean"},"revoked":{"type":"boolean"},"name":{"type":"string"},"validFrom":{"type":"string","format":"dateTime"},"validTo":{"type":"string","format":"dateTime"},"components":{"type":"array","items":{"type":"string"}},"formFactor":{"type":"string","enum":["ma-email","ma-phone","ma-custom"]},"publicRegistrationId":{"type":"string"},"mobileApp":{"$ref":"#/definitions/mobileApp"},"installNotification":{"type":"boolean"},"message":{"type":"string"},"callbackUri":{"type":"string"}}},"mobileApp":{"type":"object","properties":{"name":{"type":"string"},"id":{"type":"string","pattern":"^[0-9]*$"}}},"timeRange":{"type":"object","required":["start","end","days"],"properties":{"start":{"type":"integer"},"end":{"type":"integer"},"pinRequired":{"type":"boolean"},"days":{"type":"array","items":{"type":"string","enum":["0","1","2","3","4","5","6","a","b"],"uniqueItems":true}}}},"timeProfilePayload":{"type":"object","properties":{"name":{"type":"string"},"ranges":{"type":"array","items":{"$ref":"#/definitions/timeRange"},"minItems":1}}},"timeProfile":{"allOf":[{"$ref":"#/definitions/timeProfilePayload"},{"properties":{"id":{"type":"string"},"name":{"type":"string"},"ranges":{"type":"array","items":{"$ref":"#/definitions/timeRange"},"minItems":1}}}]},"specialDays":{"type":"array","items":{"type":"object","properties":{"date":{"type":"string"},"type":{"type":"string","enum":["a","b"]}}}},"accessLogEntry":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"data":{"type":"object"},"occurredAt":{"type":"string","format":"dateTime","description":"e.g. \"2002-10-02T15:00:00Z\""}}}}}